openapi: 3.0.0
info:
  title: My API
  description: API for managing chapters, sign categories, and exercise categories
  version: 1.0.0
servers:
  - url: https://localhost:{CHAPTERS_PORT}/api/v1
    description: Chapters server
  - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
    description: Sign Categories server
  - url: https://localhost:{EXERCISES_PORT}/api/v1
    description: Exercises server
  - url: https://localhost:{USERS_PORT}/api/v1
    description: Users server
  - url: https://localhost:{AUTH_PORT}/api/v1
    description: Auth server

paths:
  /chapters:
    get:
      summary: Get all chapters
      operationId: getAllChapters
      tags:
        - Chapters
      servers:
        - url: https://localhost:{CHAPTERS_PORT}/api/v1
      responses:
        '200':
          description: A list of chapters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    number:
                      type: integer
                    title:
                      type: string

  /chapters/{id}:
    get:
      summary: Get chapter content
      operationId: getChapterContent
      tags:
        - Chapters
      servers:
        - url: https://localhost:{CHAPTERS_PORT}/api/v1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chapter content
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                  title:
                    type: string
                  content:
                    type: string

  /sign-categories:
    get:
      summary: Get all sign categories
      operationId: getAllSignCategories
      tags:
        - Sign Categories
      servers:
        - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
      responses:
        '200':
          description: A list of sign categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    imageId: 
                      type: string
                    image:
                      type: string

  /sign-categories/{id}:
    get:
      summary: Get sign category
      operationId: getSignCategory
      tags:
        - Sign Categories
      servers:
        - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sign category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      imageId: 
                          type: string
                      image:
                        type: string
                      design:
                        type: string
                      purpose:
                        type: string
                      suggestion:
                        type: string
                  signs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        imageId:
                          type: string
                        image:
                          type: string

  /images/{name}:
    get:
      summary: Get an image
      description: Retrieve an image by its name.
      servers:
        - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
      tags:
        - Sign Categories
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the image to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful response with the image
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Image not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /comparison-categories:
    get:
      summary: Returns a list of comparison categories
      servers:
        - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
      tags:
        - Comparison
      responses:
        '200':
          description: A list of comparison categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
        '500':
          description: Internal Server Error

  /comparison-categories/{ccId}/comparisons:
    get:
      summary: Returns a list of comparisons for a category
      servers:
        - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
      tags:
        - Comparison
      parameters:
        - name: ccId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the comparison category
      responses:
        '200':
          description: A list of comparisons
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
        '400':
          description: Invalid ccId format
        '404':
          description: ccId not found
        '500':
          description: Internal Server Error

  /comparison-categories/{ccId}/comparisons/{cId}:
    get:
      summary: Returns details of a specific comparison
      servers:
        - url: https://localhost:{TRAFFIC_SIGNS_PORT}/api/v1
      tags:
        - Comparison
      parameters:
        - name: ccId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the comparison category
        - name: cId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the comparison
      responses:
        '200':
          description: Details of the comparison
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: integer
                    country:
                      type: string
                    imageId:
                      type: string
                    image:
                      type: string
        '400':
          description: Invalid cId format
        '404':
          description: Comparison not found
        '500':
          description: Internal Server Error

  /exercises/categories:
    get:
      summary: Get all exercise categories
      operationId: getAllExerciseCategories
      tags:
        - Exercises
      servers:
        - url: https://localhost:{EXERCISES_PORT}/api/v1
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
            description: Bearer token for optional authorization
      responses:
        '200':
          description: A list of exercise categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string

  /exercises/unsolved/{id}:
    get:
      summary: Get an unsolved question by category
      tags:
        - Exercises
      servers:
        - url: https://localhost:{EXERCISES_PORT}/api/v1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionId:
                      type: integer
                    categoryId:
                      type: integer
                    categoryTitle:
                      type: string
                    questionText:
                      type: string
                    questionImage:
                      type: string
                    answers:
                      type: array
                      items:
                        type: object
                        properties:
                          answerId:
                            type: integer
                          description:
                            type: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /exercises/incorrectly-solved:
    get:
      summary: Get incorrectly solved question
      tags:
        - Exercises
      servers:
        - url: https://localhost:{EXERCISES_PORT}/api/v1
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionId:
                      type: integer
                    categoryId:
                      type: integer
                    categoryTitle:
                      type: string
                    questionText:
                      type: string
                    questionImage:
                      type: string
                    answers:
                      type: array
                      items:
                        type: object
                        properties:
                          answerId:
                            type: integer
                          description:
                            type: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /users/{id}/solutions:
    post:
      summary: Submit solutions for a user
      description: Submits a set of solutions for a specific user.
      tags:
        - Exercises
      servers:
        - url: https://localhost:{USERS_PORT}/api/v1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: integer
                  description: The ID of the question
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      answerId:
                        type: integer
                        description: The ID of the answer
                      selected:
                        type: boolean
                        description: Whether the answer was selected
              required:
                - questionId
                - answers
              example:
                questionId: 123
                answers:
                  - answerId: 1
                    selected: true
                  - answerId: 2
                    selected: false
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Solutions submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Solutions submitted successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: INVALID_INPUT
                  errorMessage:
                    type: string
                    example: Invalid input data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: UNAUTHORIZED
                  errorMessage:
                    type: string
                    example: Authorization required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  errorMessage:
                    type: string
                    example: An error occurred while processing the request

  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user with a username, password, and email.
      tags: ['Auth']
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the new user
                  example: john_doe
                password:
                  type: string
                  description: The password for the new user
                  example: your_password
                email:
                  type: string
                  format: email
                  description: The email address of the new user
                  example: johndoe@example.com
              required:
                - username
                - password
                - email
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: The email/username of the user
                  example: user@example.com
                password:
                  type: string
                  description: The password of the user
                  example: password123
      responses:
        '200':
          description: Successful login, returns user data and an auth cookie
          headers: 
            Set-Cookie:
              description: Set the authentication cookie
              schema: 
                type: string
                example: TW-RoT-Auth-Cookie=token_value; Max-Age=100000; SameSite=Strict; httpsOnly; Secure
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the logged-in user
                    example: 1
                  username:
                    type: string
                    description: The username of the logged-in user
                    example: example_username
                  updatedAt:
                    type: string
                    description: The last date the account was updated in any way
                    example: 2012-04-23T18:25:43.511Z
                  roles:
                    type: integer
                    description: The roles of the logged-in user
                    example: 0
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '401':
          description: Unauthorized, invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/verify:
    post:
      summary: Verify a token
      description: Verify the provided token to ensure its validity.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to be verified
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
              required:
                - token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: Token is valid
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '401':
          description: Unauthorized, token is invalid or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/change-credentials:
    post:
      summary: Change user credentials
      description: Request a change to the user's email, password, or username.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email of the user requesting the change
                  example: user@example.com
                type:
                  type: string
                  enum: ['email', 'password', 'username']
                  description: The type of credential change being requested
                  example: password
              required:
                - email
                - type
      responses:
        '200':
          description: Change request accepted, further instructions sent to the user's email
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/change-password:
    post:
      summary: Change user password
      description: Change the user's password using a token.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token for password change
                  example: some_token_string
                value:
                  type: string
                  description: The new password
                  example: new_password123
              required:
                - token
                - value
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/change-email:
    post:
      summary: Change user email
      description: Change the user's email using a token.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token for email change
                  example: some_token_string
                value:
                  type: string
                  description: The new email
                  example: new_email@example.com
              required:
                - token
                - value
      responses:
        '200':
          description: Email changed successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/change-username:
    post:
      summary: Change user username
      description: Change the user's username using a token.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token for username change
                  example: some_token_string
                value:
                  type: string
                  description: The new username
                  example: new_username
              required:
                - token
                - value
      responses:
        '200':
          description: Username changed successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/logout:
    post:
      summary: Logout user
      description: Logs out the authenticated user.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /auth/authenticated:
    post:
      summary: Verify user authentication
      description: Verifies if the user authentication cookie is valid.
      tags:
        - Auth
      servers:
        - url: https://localhost:{AUTH_PORT}/api/v1
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User is authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the authenticated user
                    example: 1
                  username:
                    type: string
                    description: The username of the authenticated user
                    example: john_doe
                  updatedAt:
                    type: string
                    format: date-time
                    description: The last update timestamp
                    example: 2023-06-18T12:34:56Z
                  roles:
                    type: integer
                    description: The roles assigned to the authenticated user
                    example: 2
        '401':
          description: Unauthorized, invalid authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                    example: 0

  /exercises/{id}/solution:
    get:
      summary: Get solution for exercise
      tags: [Exercises]
      servers:
        - url: https://localhost:{EXERCISES_PORT}/api/v1
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the exercise
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    answerId:
                      type: integer
                    correct:
                      type: boolean
                  required:
                    - answerId
                    - correct

  /users/{id}/questionnaire:
    post:
      summary: Create questionnaire for a user
      tags: [Questionnaire]
      servers:
        - url: https://localhost:{USERS_PORT}/api/v1
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    generatedQuestionId:
                      type: integer
                    questionText:
                      type: string
                    questionImage:
                      type: string
                    answers:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          description:
                            type: string

    get:
      summary: Get questionnaire for a user
      tags: [Questionnaire]
      servers:
        - url: https://localhost:{USERS_PORT}/api/v1
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  questionnaireId:
                    type: integer
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        generatedQuestionId:
                          type: integer
                        questionText:
                          type: string
                        questionImage:
                          type: string
                        answers:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              description:
                                type: string

  /questionnaires/{questionnaireId}/question/{gqId}/solution:
    post:
      parameters:
        - name: questionnaireId
          in: path
          required: true
          schema:
            type: integer
          description: The Id of questionnaire
        - name: gqId
          in: path
          required: true
          schema:
            type: integer
          description: The Id of the question
      tags: [Questionnaire]
      servers:
        - url: https://localhost:{USERS_PORT}/api/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: integer
                  description: The ID of the question
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      answerId:
                        type: integer
                        description: The ID of the answer
                      selected:
                        type: boolean
                        description: Whether the answer was selected
              required:
                - answers
              example:
                answers:
                  - answerId: 1
                    selected: true
                  - answerId: 2
                    selected: false
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Solutions submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Solutions submitted successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: INVALID_INPUT
                  errorMessage:
                    type: string
                    example: Invalid input data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: UNAUTHORIZED
                  errorMessage:
                    type: string
                    example: Authorization required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  errorMessage:
                    type: string
                    example: An error occurred while processing the request

components:

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: TW-RoT-Auth-Cookie

  schemas:
    Chapter:
      type: object
      properties:
        id:
          type: integer
        number:
          type: integer
        title:
          type: string

    SignCategory:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string

    ExerciseCategory:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string

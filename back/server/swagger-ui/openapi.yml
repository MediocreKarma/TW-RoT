openapi: 3.0.0
info:
  title: My API
  description: API for managing chapters, sign categories, and exercise categories
  version: 1.0.0
servers:
  - url: http://localhost:12734/api/v1
    description: Local server

paths:
  /chapters:
    get:
      summary: Get all chapters
      operationId: getAllChapters
      tags:
        - Chapters
      responses:
        '200':
          description: A list of chapters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    number:
                      type: integer
                    title:
                      type: string

  /chapters/{id}:
    get:
      summary: Get chapter content
      operationId: getChapterContent
      tags:
        - Chapters
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chapter content
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                  title:
                    type: string
                  content:
                    type: string

  /sign-categories:
    get:
      summary: Get all sign categories
      operationId: getAllSignCategories
      tags:
        - Sign Categories
      responses:
        '200':
          description: A list of sign categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string

  /sign-categories/{id}:
    get:
      summary: Get sign category
      operationId: getSignCategory
      tags:
        - Sign Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sign category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string

  /exercises/categories:
    get:
      summary: Get all exercise categories
      operationId: getAllExerciseCategories
      tags:
        - Exercises
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
            description: Bearer token for optional authorization
      responses:
        '200':
          description: A list of exercise categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string

  /exercises/unsolved/{id}:
    get:
      summary: Get an unsolved question by category
      tags:
        - Exercises
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionId:
                      type: integer
                    categoryId:
                      type: integer
                    categoryTitle:
                      type: string
                    questionText:
                      type: string
                    questionImage:
                      type: string
                    answers:
                      type: array
                      items:
                        type: object
                        properties:
                          answerId:
                            type: integer
                          description:
                            type: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /exercises/incorrectly-solved:
    get:
      summary: Get incorrectly solved question
      tags:
        - Exercises
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    questionId:
                      type: integer
                    categoryId:
                      type: integer
                    categoryTitle:
                      type: string
                    questionText:
                      type: string
                    questionImage:
                      type: string
                    answers:
                      type: array
                      items:
                        type: object
                        properties:
                          answerId:
                            type: integer
                          description:
                            type: string
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /users/{id}/solutions:
    post:
      summary: Submit solutions for a user
      description: Submits a set of solutions for a specific user.
      tags:
        - Exercises
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: integer
                  description: The ID of the question
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      answerId:
                        type: integer
                        description: The ID of the answer
                      selected:
                        type: boolean
                        description: Whether the answer was selected
              required:
                - questionId
                - answers
              example:
                questionId: 123
                answers:
                  - answerId: 1
                    selected: true
                  - answerId: 2
                    selected: false
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Solutions submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Solutions submitted successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: INVALID_INPUT
                  errorMessage:
                    type: string
                    example: Invalid input data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: UNAUTHORIZED
                  errorMessage:
                    type: string
                    example: Authorization required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorCode:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  errorMessage:
                    type: string
                    example: An error occurred while processing the request

  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user with a username, password, and email.
      tags: ['Auth']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the new user
                  example: john_doe
                password:
                  type: string
                  description: The password for the new user
                  example: your_password
                email:
                  type: string
                  format: email
                  description: The email address of the new user
                  example: johndoe@example.com
              required:
                - username
                - password
                - email
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error

  /auth/login:
    post:
      summary: Login a user
      tags: ['Auth']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email of the user
                  example: user@example.com
                password:
                  type: string
                  description: The password of the user
                  example: password123
      responses:
        '200':
          description: Successful login, returns the user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the logged-in user
                    example: 1
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '401':
          description: Unauthorized, invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /exercises/{id}/solution:
    get:
      summary: Get solution for exercise
      tags: [Exercises]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the exercise
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    answerId:
                      type: integer
                    correct:
                      type: boolean
                  required:
                    - answerId
                    - correct

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: plain

  schemas:
    Chapter:
      type: object
      properties:
        id:
          type: integer
        number:
          type: integer
        title:
          type: string

    SignCategory:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string

    ExerciseCategory:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
